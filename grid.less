//
//  GridLESS -- Grid System for LESS CSS
//  Copyright (c) 2013-2014 Ralf S. Engelschall <rse@engelschall.com>
//
//  Permission is hereby granted, free of charge, to any person obtaining
//  a copy of this software and associated documentation files (the
//  "Software"), to deal in the Software without restriction, including
//  without limitation the rights to use, copy, modify, merge, publish,
//  distribute, sublicense, and/or sell copies of the Software, and to
//  permit persons to whom the Software is furnished to do so, subject to
//  the following conditions:
//
//  The above copyright notice and this permission notice shall be included
//  in all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
//  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
//  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

//  +-----------+--+--+-----------+--+--+-----------+--+--+-----------+
//  |           |  |  |           |  |  |           |  |  |           |
//  |     W     |M | M|     W     |M | M|     W     |M | M|     W     |
//  |           |  |  |           |  |  |           |  |  |           |
//  +-----------+--+--+-----------+--+--+-----------+--+--+-----------+
//  +-----------------------------------------------------------------+
//  |                                                                 |
//  |                                P                                |
//  +-----------+--+--+-----------+--+--+-----------+--+--+-----------+
//  |           |  |  |           |  |  |           |  |  |           |
//  |     W     |M | M|     W     |M | M|     W     |M | M|     W     |
//  |           |  |  |           |  |  |           |  |  |           |
//  +-----------+--+--+-----------+--+--+-----------+--+--+-----------+
//  +-----------------------------------------------------------------+
//  |                                                                 |
//  |                                P                                |
//  +-----------+--+--+-----------+--+--+-----------+--+--+-----------+
//  |           |  |  |           |  |  |           |  |  |           |
//  |     W     |M | M|     W     |M | M|     W     |M | M|     W     |
//  |           |  |  |           |  |  |           |  |  |           |
//  +-----------+--+--+-----------+--+--+-----------+--+--+-----------+

//
//  ==== Default Values ====
//

//  950px grid (12*70+(12-1)*10) with "row", "off-N-N" and "col-N-N" classes
@grid-def-name-row:    row;
@grid-def-name-off:    off;
@grid-def-name-col:    col;
@grid-def-col-max:     12;    // for elastic & static
@grid-def-col-width:   70px;  // for           static
@grid-def-gut-width:   10px;  // for           static
@grid-def-gut-percent: 0.10;  // for elastic

//
//  ==== Grid Generator API ====
//

//  generate an elastic (percentage) grid
.grid-elastic(
    @name-row:    @grid-def-name-row;
    @name-off:    @grid-def-name-off;
    @name-col:    @grid-def-name-col;
    @col-max:     @grid-def-col-max;
    @gut-percent: @grid-def-gut-percent
) when (@col-max =< 16) {
    @col-width: 100px; // any number of pixels does
    @gut-width: (@col-width * @gut-percent);
    .grid-gen-intern(
        @name-row; @name-off; @name-col;
        @col-max; @col-width; @gut-width;
        true
    );
}

//  generate a static (pixel) grid
.grid-static(
    @name-row:    @grid-def-name-row;
    @name-off:    @grid-def-name-off;
    @name-col:    @grid-def-name-col;
    @col-max:     @grid-def-col-max;
    @col-width:   @grid-def-col-width;
    @gut-width:   @grid-def-gut-width
) when (@col-max =< 16) {
    .grid-gen-intern(
        @name-row; @name-off; @name-col;
        @col-max; @col-width; @gut-width;
        false
    );
}

//
//  ==== Grid Top-Level Generator ====
//

//  generate a grid row and forward to offset/column generators
.grid-gen-intern(@name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic) {
    .grid-gen-row(@name-row;            @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-x(@name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
}

//  expand X-X into X-N
.grid-gen-x-x(@name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic) {
    .grid-gen-x-n( 1; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n( 2; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n( 3; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n( 4; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n( 5; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n( 6; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n( 7; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n( 8; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n( 9; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n(10; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n(11; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n(12; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n(13; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n(14; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n(15; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-x-n(16; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
}

//  expand X-N into K-N
.grid-gen-x-n(@n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic) {
    .grid-gen-k-n( 1; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n( 2; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n( 3; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n( 4; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n( 5; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n( 6; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n( 7; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n( 8; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n( 9; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n(10; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n(11; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n(12; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n(13; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n(14; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n(15; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
    .grid-gen-k-n(16; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic);
}

//   generate row style
.grid-gen-row(@name-row; @name-col; @col-max; @col-width; @gut-width; @elastic) {
    &.@{name-row} { .grid-row(@name-col; @col-max; @col-width; @gut-width; @elastic); }
}

//   generate column and offset styles
.grid-gen-k-n(@k; @n; @name-row; @name-off; @name-col; @col-max; @col-width; @gut-width; @elastic)
    when (@k =< @n) and (@n =< @col-max) {
    &.@{name-row} > .@{name-col}-@{k}-@{n} { .grid-col(@k * (@col-max / @n); @col-max; @col-width; @gut-width; @elastic); }
    &.@{name-row} > .@{name-off}-@{k}-@{n} { .grid-off(@k * (@col-max / @n); @col-max; @col-width; @gut-width; @elastic); }
}

//
//  ==== Grid Row Generator ====
//

//  generate style of a single row
.grid-row(
    @name-col:  @grid-def-name-col;
    @col-max:   @grid-def-col-max;
    @col-width: @grid-def-col-width;
    @gut-width: @grid-def-gut-width;
    @elastic:     false
) when (@col-max >= 1) {
    @row-width: (@col-width * @col-max) + (@gut-width * (@col-max - 1)) * 1px;
    .grid-row-step1(@name-col; @col-max; @col-width; @gut-width; @row-width; @elastic);
}

//  dispatch according to type
.grid-row-step1 (@name-col; @col-max; @col-width; @gut-width; @row-width; @elastic) when (@elastic = true) {
    .grid-row-step2(@name-col; @col-max; @col-width; @gut-width; @row-width; 100%);
}
.grid-row-step1 (@name-col; @col-max; @col-width; @gut-width; @row-width; @elastic) when not (@elastic = true) {
    .grid-row-step2(@name-col; @col-max; @col-width; @gut-width; @row-width; @row-width);
}

//  generate the style
.grid-row-step2 (@name-col; @col-max; @col-width; @gut-width; @row-width; @row-width-req) {
    //  calculate the gutter width
    @gutter: round(@row-width-req * (@gut-width / @row-width), 8);
    @gutter12: round(@gutter / 2, 8);

    //  make row block-styled
    display: block;
    width: @row-width-req;
    overflow: hidden;

    //  apply the necessary floating fix
    .grid-clearfix;

    //  support row gutter
    padding: 0;
    & + & {
        padding-top: @gutter;
    }

    //  support column gutter
    position: relative;
    & > [class*='@{name-col}-'] {
        position: relative;
        display: inline-block;
        float: left;
        margin: 0 @gutter12;
    }
    & > [class*='@{name-col}-'] + [class*='@{name-off}-'] {
        left: @gutter12;
        margin-right: @gutter12;
    }
    & > [class*='@{name-col}-']:first-of-type {
        margin-left: 0;
    }
    & > [class*='@{name-col}-']:last-of-type {
        margin-right: 0;
    }
}

//  generate a micro clearfix (see http://nicolasgallagher.com/micro-clearfix-hack/)
.grid-clearfix() {
    // *zoom: 1;         // bugfix for IE 6
    &:before, &:after {
        content: "";     // to have surrounding content
        display: table;  // to style the content accordingly
    }
    &:after {
        clear: both;     // the float clearing
    }
}

//
//  ==== Grid Column Generator ====
//

//  generate style of a single column
.grid-col(
    @col-num:   1;
    @col-max:   @grid-def-col-max;
    @col-width: @grid-def-col-width;
    @gut-width: @grid-def-gut-width;
    @elastic:   false
) {
    @row-width: (@col-width * @col-max) + (@gut-width * (@col-max - 1)) * 1px;
    .grid-col-step1(@col-num; @col-max; @col-width; @gut-width; @row-width; @elastic);
}
.grid-col-step1 (@col-num; @col-max; @col-width; @gut-width; @row-width; @row-width-req) when (@elastic = true) {
    .grid-col-step2(@col-num; @col-max; @col-width; @gut-width; @row-width; 100%);
}
.grid-col-step1 (@col-num; @col-max; @col-width; @gut-width; @row-width; @row-width-req) when not (@elastic = true) {
    .grid-col-step2(@col-num; @col-max; @col-width; @gut-width; @row-width; @row-width);
}
.grid-col-step2 (@col-num; @col-max; @col-width; @gut-width; @row-width; @row-width-req) {
    width: round(
        ((@row-width-req * ((@col-width * @col-num) + (@gut-width * (@col-num - 1)))) / @row-width),
    8);
}

//  generate style of a single column offset
.grid-off(
    @col-num:   1;
    @col-max:   @grid-def-col-max;
    @col-width: @grid-def-col-width;
    @gut-width: @grid-def-gut-width;
    @elastic:   false
) {
    @row-width: (@col-width * @col-max) + (@gut-width * (@col-max - 1)) * 1px;
    .grid-off-step1(@col-num; @col-max; @col-width; @gut-width; @row-width; @elastic);
}

//  dispatch according to type
.grid-off-step1 (@col-num; @col-max; @col-width; @gut-width; @row-width; @elastic) when (@elastic = true) {
    .grid-off-step2(@col-num; @col-max; @col-width; @gut-width; @row-width; 100%);
}
.grid-off-step1 (@col-num; @col-max; @col-width; @gut-width; @row-width; @elastic) when not (@elastic = true) {
    .grid-off-step2(@col-num; @col-max; @col-width; @gut-width; @row-width; @row-width);
}

//  generate the style
.grid-off-step2 (@col-num; @col-max; @col-width; @gut-width; @row-width; @row-width-req) when (@col-num < @col-max) {
    margin-left: round(
          ((@row-width-req * ((@col-width + @gut-width) * @col-num)) / @row-width),
    8) !important;
}

